generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          Role           @default(CUSTOMER)
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  ownedShop     Shop?          @relation("ShopOwner")
  appointments  Appointment[]
  notifications Notification[]
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  address     String?
  phone       String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  ownerId     String     @unique
  owner       User       @relation("ShopOwner", fields: [ownerId], references: [id])
  services    Service[]
  schedules   Schedule[]
  appointments Appointment[]
}

model Service {
  id          String   @id @default(uuid())
  shopId      String
  name        String
  duration    Int      // in minutes
  price       Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true)
  
  // Relations
  shop        Shop     @relation(fields: [shopId], references: [id])
  appointments Appointment[]
  
  @@index([shopId])
}

model Schedule {
  id         String   @id @default(uuid())
  shopId     String
  dayOfWeek  Int      // 0-6 (Sunday-Saturday)
  openTime   String   // "10:00"
  closeTime  String   // "20:00"
  isActive   Boolean  @default(true)
  
  // Relations
  shop       Shop     @relation(fields: [shopId], references: [id])
  
  @@unique([shopId, dayOfWeek])
  @@index([shopId])
}

model Appointment {
  id          String   @id @default(uuid())
  shopId      String
  customerId  String
  serviceId   String
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shop        Shop     @relation(fields: [shopId], references: [id])
  customer    User     @relation(fields: [customerId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  
  @@index([shopId, startTime])
  @@index([customerId])
  @@index([status])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId, isRead])
}

enum Role {
  CUSTOMER
  BARBER
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  RESCHEDULED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum NotificationType {
  APPOINTMENT_CREATED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_RESCHEDULED
  APPOINTMENT_CANCELLED
  APPOINTMENT_REMINDER
}
